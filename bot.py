import logging
import os
import time
from telegram import Update, error
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext

# --- Ph·∫ßn C·∫•u h√¨nh Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Ph·∫ßn L·∫•y Th√¥ng Tin C·∫•u H√¨nh ---
# BOT_TOKEN v·∫´n b·∫Øt bu·ªôc ph·∫£i l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# ID nh√≥m ngu·ªìn v√† nh√≥m ƒë√≠ch ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ JSON b·∫°n cung c·∫•p
# G√°n tr·ª±c ti·∫øp v√†o code ƒë·ªÉ b·∫°n d·ªÖ copy-paste.
# NH∆ØNG NH·ªö: Khi deploy l√™n Render, b·∫°n N√äN d√πng bi·∫øn m√¥i tr∆∞·ªùng cho c·∫£ c√°c ID n√†y.
SOURCE_GROUP_ID = -1001453035193  # ID c·ªßa k√™nh "ƒê·∫°i H·ªçc DamDang üîû (@daihoc69)"
TARGET_GROUP_ID = -1002497993114  # ID c·ªßa nh√≥m "Clip nyc 1"

# In ra ƒë·ªÉ ki·ªÉm tra (b·∫°n c√≥ th·ªÉ x√≥a ho·∫∑c comment d√≤ng n√†y sau khi ki·ªÉm tra)
logger.info(f"SOURCE_GROUP_ID ƒë∆∞·ª£c g√°n l√†: {SOURCE_GROUP_ID}")
logger.info(f"TARGET_GROUP_ID ƒë∆∞·ª£c g√°n l√†: {TARGET_GROUP_ID}")


# --- Ph·∫ßn X·ª≠ L√Ω Danh S√°ch Video ƒê√£ G·ª≠i ---
PROCESSED_VIDEOS_FILE = "processed_videos.txt"
processed_video_unique_ids = set()

def load_processed_videos():
    """T·∫£i danh s√°ch file_unique_id c·ªßa c√°c video ƒë√£ x·ª≠ l√Ω t·ª´ file khi bot kh·ªüi ƒë·ªông."""
    try:
        with open(PROCESSED_VIDEOS_FILE, "r") as f:
            for line in f:
                processed_video_unique_ids.add(line.strip())
        logger.info(f"ƒê√£ t·∫£i {len(processed_video_unique_ids)} ID video ƒë√£ x·ª≠ l√Ω t·ª´ file.")
    except FileNotFoundError:
        logger.info(f"File {PROCESSED_VIDEOS_FILE} kh√¥ng t√¨m th·∫•y. B·∫Øt ƒë·∫ßu v·ªõi danh s√°ch tr·ªëng.")
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i danh s√°ch video ƒë√£ x·ª≠ l√Ω: {e}")

def save_processed_video_id(video_unique_id: str):
    """L∆∞u file_unique_id c·ªßa video ƒë√£ x·ª≠ l√Ω v√†o set trong b·ªô nh·ªõ v√† ghi v√†o cu·ªëi file."""
    processed_video_unique_ids.add(video_unique_id)
    try:
        with open(PROCESSED_VIDEOS_FILE, "a") as f:
            f.write(video_unique_id + "\n")
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u ID video {video_unique_id} v√†o file: {e}")

def process_and_send_video(context: CallbackContext, file_id: str, file_unique_id: str, original_message_id_for_log="N/A"):
    """Ki·ªÉm tra v√† g·ª≠i video n·∫øu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω, c√≥ x·ª≠ l√Ω rate limit c∆° b·∫£n."""
    if file_unique_id in processed_video_unique_ids:
        logger.info(f"Video {file_unique_id} (t·ª´ tin nh·∫Øn g·ªëc ID: {original_message_id_for_log}) ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω. B·ªè qua.")
        return

    try:
        logger.info(f"ƒêang chu·∫©n b·ªã g·ª≠i video {file_unique_id} (t·ª´ tin nh·∫Øn g·ªëc ID: {original_message_id_for_log}) ƒë·∫øn nh√≥m {TARGET_GROUP_ID}...")
        context.bot.send_video(chat_id=TARGET_GROUP_ID, video=file_id) # G·ª≠i kh√¥ng caption
        logger.info(f"ƒê√É G·ª¨I TH√ÄNH C√îNG video {file_unique_id} ƒë·∫øn nh√≥m {TARGET_GROUP_ID}.")
        save_processed_video_id(file_unique_id)
        time.sleep(2)
    except error.RetryAfter as e:
        logger.warning(f"B·ªã Telegram y√™u c·∫ßu th·ª≠ l·∫°i sau {e.retry_after} gi√¢y. ƒêang t·∫°m d·ª´ng...")
        time.sleep(e.retry_after)
        process_and_send_video(context, file_id, file_unique_id, original_message_id_for_log)
    except Exception as e:
        logger.error(f"L·ªói nghi√™m tr·ªçng khi g·ª≠i video {file_unique_id} ƒë·∫øn nh√≥m {TARGET_GROUP_ID}: {e}")

def video_message_handler(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn video ho·∫∑c document l√† video."""
    message = update.message
    
    if not (message and message.chat_id == SOURCE_GROUP_ID):
        return

    video_to_process_file_id = None
    video_to_process_file_unique_id = None
    original_message_id = message.message_id

    if message.video:
        video_to_process_file_id = message.video.file_id
        video_to_process_file_unique_id = message.video.file_unique_id
        logger.info(f"Nh·∫≠n video (video type) trong nh√≥m ngu·ªìn: file_id={video_to_process_file_id}, file_unique_id={video_to_process_file_unique_id}")
    elif message.document and message.document.mime_type and message.document.mime_type.startswith('video/'):
        video_to_process_file_id = message.document.file_id
        video_to_process_file_unique_id = message.document.file_unique_id
        logger.info(f"Nh·∫≠n video (document type) trong nh√≥m ngu·ªìn: file_id={video_to_process_file_id}, file_unique_id={video_to_process_file_unique_id}")
    
    if video_to_process_file_id and video_to_process_file_unique_id:
        process_and_send_video(context, video_to_process_file_id, video_to_process_file_unique_id, original_message_id)

def error_handler(update: Update, context: CallbackContext) -> None:
    """Ghi l·∫°i l·ªói n·∫øu c√≥."""
    logger.warning(f'Update "{update}" g√¢y ra l·ªói "{context.error}"')

def main() -> None:
    """H√†m n√†y s·∫Ω thi·∫øt l·∫≠p v√† ch·∫°y bot."""
    if not BOT_TOKEN: # Ch·ªâ c·∫ßn ki·ªÉm tra BOT_TOKEN v√¨ c√°c ID nh√≥m ƒë√£ g√°n tr·ª±c ti·∫øp
        logger.error("L·ªñI NGHI√äM TR·ªåNG: Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN. Bot kh√¥ng th·ªÉ ch·∫°y.")
        return
    
    if not isinstance(SOURCE_GROUP_ID, int) or not isinstance(TARGET_GROUP_ID, int):
        logger.error(f"L·ªñI: SOURCE_GROUP_ID ({SOURCE_GROUP_ID}) ho·∫∑c TARGET_GROUP_ID ({TARGET_GROUP_ID}) kh√¥ng ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá.")
        return

    load_processed_videos()

    updater = Updater(BOT_TOKEN, use_context=True, drop_pending_updates=False)
    dispatcher = updater.dispatcher

    media_filter = Filters.video | (Filters.document & Filters.document.video)
    # Ch·ªâ ƒë·ªãnh dispatcher ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ SOURCE_GROUP_ID c·ª• th·ªÉ
    # b·∫±ng c√°ch ki·ªÉm tra `message.chat_id == SOURCE_GROUP_ID` b√™n trong handler.
    # Ho·∫∑c, n·∫øu mu·ªën l·ªçc ch·∫∑t h∆°n ·ªü dispatcher:
    # handler = MessageHandler(Filters.chat(chat_id=SOURCE_GROUP_ID) & media_filter, video_message_handler)
    # dispatcher.add_handler(handler)
    # Tuy nhi√™n, c√°ch ki·ªÉm tra trong handler ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu h∆°n cho nhi·ªÅu tr∆∞·ªùng h·ª£p.
    dispatcher.add_handler(MessageHandler(media_filter, video_message_handler))
    
    dispatcher.add_error_handler(error_handler)

    logger.info("Bot ƒëang kh·ªüi ƒë·ªông v√† chu·∫©n b·ªã l·∫Øng nghe tin nh·∫Øn...")
    updater.start_polling()
    logger.info("BOT ƒê√É CH·∫†Y! ƒêang ch·ªù video m·ªõi...")
    updater.idle()

if __name__ == '__main__':
    main()